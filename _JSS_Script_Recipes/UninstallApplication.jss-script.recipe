<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Description</key>
	<string>Creates a script</string>
	<key>Identifier</key>
	<string>ch.ethz.id.jss-script.UninstallApplication</string>
	<key>Input</key>
	<dict>
		<key>PKG_ID</key>
		<string>None</string>
		<key>PKG_ID_2</key>
		<string>None</string>
		<key>PKG_ID_3</key>
		<string>None</string>
		<key>PKG_ID_4</key>
		<string>None</string>
		<key>PKG_ID_5</key>
		<string>None</string>
		<key>SCRIPT_NAME</key>
		<string>Uninstall %NAME%.sh</string>
	</dict>
	<key>MinimumVersion</key>
	<string>1.0.0</string>
	<key>Process</key>
	<array>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>file_content</key>
				<string>#!/bin/bash

#######################################################################
#
# %SCRIPT_NAME% Script for Jamf Pro
#
# This script can delete apps that are sandboxed and live in /Applications
#
#######################################################################

# Inputted variables
appName="%JSS_INVENTORY_NAME%"

function silent_app_quit() {
    # silently kill the application.
    appName="$1"
    if [[ $(pgrep -ix "$appName") ]]; then
    	echo "Closing $appName"
    	/usr/bin/osascript -e "quit app \"$appName\""
    	sleep 1

    	# double-check
    	countUp=0
    	while [[ $countUp -le 10 ]]; do
    		if [[ -z $(pgrep -ix "$appName") ]]; then
    			echo "$appName closed."
    			break
    		else
    			let countUp=$countUp+1
    			sleep 1
    		fi
    	done
        if [[ $(pgrep -x "$appName") ]]; then
    	    echo "$appName failed to quit - killing."
    	    /usr/bin/pkill "$appName"
        fi
    fi
}

if [[ -z "${appName}" ]]; then
    echo "No application specified!"
    exit 1
fi

# quit the app if running
silent_app_quit "$appName"

# Now remove the app
echo "Removing application: ${appName}"

# Add .app to end when providing just a name e.g. "TeamViewer"
if [[ ! $appName == *".app"* ]]; then
	appName=$appName".app"
fi

# Add standard path if none provided
if [[ ! $appName == *"/"* ]]; then
	appToDelete="/Applications/$appName"
else
	appToDelete="$appName"
fi

echo "Application will be deleted: $appToDelete"
# Remove the application
/bin/rm -rf "${appToDelete}"

echo "Checking if $appName is actually deleted..."
if [[ -d "${appToDelete}" ]]; then
    echo "$appName failed to delete"
else
    echo "$appName deleted successfully"
fi

# Try to Forget the packages if we can find a match
# Loop through the remaining parameters
pkg_1="%PKG_ID%"
pkg_2="%PKG_ID_2%"
pkg_3="%PKG_ID_3%"
pkg_4="%PKG_ID_4%"
pkg_5="%PKG_ID_5%"
for (( i = 1; i &lt; 5; i++ )); do
    pkg_id=pkg_$i
    if [[ ${!pkg_id} != "None" ]]; then
        echo "Forgetting package ${!pkg_id}..."
        /usr/sbin/pkgutil --pkgs | /usr/bin/grep -i "${!pkg_id}" | /usr/bin/xargs /usr/bin/sudo /usr/sbin/pkgutil --forget
    fi
done

echo "$appName deletion complete"
</string>
				<key>file_mode</key>
				<string>0755</string>
				<key>file_path</key>
				<string>%RECIPE_DIR%/%NAME%-uninstall.sh</string>
			</dict>
			<key>Processor</key>
			<string>FileCreator</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>file_content</key>
				<string>&lt;script&gt;
    &lt;name&gt;%NAME%-uninstall.sh&lt;/name&gt;
    &lt;category&gt;Uninstallers&lt;/category&gt;
    &lt;filename&gt;%NAME%-uninstall.sh&lt;/filename&gt;
    &lt;info /&gt;
    &lt;notes /&gt;
    &lt;priority&gt;After&lt;/priority&gt;
    &lt;parameters /&gt;
    &lt;os_requirements /&gt;
&lt;/script&gt;
</string>
				<key>file_mode</key>
				<string>0755</string>
				<key>file_path</key>
				<string>%RECIPE_DIR%/%NAME%-ScriptTemplate-uninstall.xml</string>
			</dict>
			<key>Processor</key>
			<string>FileCreator</string>
		</dict>
	</array>
</dict>
</plist>
