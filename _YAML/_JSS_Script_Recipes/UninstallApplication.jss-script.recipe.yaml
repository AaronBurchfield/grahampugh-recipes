Description: Creates a script
Identifier: com.github.grahampugh.recipes.jss-script.UninstallApplication
MinimumVersion: 1.0.0

Input:
  PKG_ID_5: None
  PKG_ID_4: None
  PKG_ID_3: None
  PKG_ID_2: None
  PKG_ID: None
  SCRIPT_NAME: Uninstall %NAME%.sh

Process:
- Processor: FileCreator
  Arguments:
    file_content: "#!/bin/bash\n\n#######################################################################\n#\n# %SCRIPT_NAME% Script for Jamf Pro\n#\n# This script can delete apps that are sandboxed and live in /Applications\n#\n#######################################################################\n\n# Inputted variables\nappName=\"%JSS_INVENTORY_NAME%\"\n\nfunction silent_app_quit() {\n    # silently kill the application.\n    appName=\"$1\"\n    if [[ $(pgrep -ix \"$appName\") ]]; then\n    \techo \"Closing $appName\"\n    \t/usr/bin/osascript -e \"quit app \\\"$appName\\\"\"\n    \tsleep 1\n\n    \t# double-check\n    \tcountUp=0\n    \twhile [[ $countUp -le 10 ]]; do\n    \t\tif [[ -z $(pgrep -ix \"$appName\") ]]; then\n    \t\t\techo \"$appName closed.\"\n    \t\t\tbreak\n    \t\telse\n    \t\t\tlet countUp=$countUp+1\n    \t\t\tsleep 1\n    \t\tfi\n    \tdone\n        if [[ $(pgrep -x \"$appName\") ]]; then\n    \t    echo \"$appName failed to quit - killing.\"\n    \t    /usr/bin/pkill \"$appName\"\n        fi\n    fi\n}\n\nif [[ -z \"${appName}\" ]]; then\n    echo \"No application specified!\"\n    exit 1\nfi\n\n# quit the app if running\nsilent_app_quit \"$appName\"\n\n# Now remove the app\necho \"Removing application: ${appName}\"\n\n# Add .app to end when providing just a name e.g. \"TeamViewer\"\nif [[ ! $appName == *\".app\"* ]]; then\n\tappName=$appName\".app\"\nfi\n\n# Add standard path if none provided\nif [[ ! $appName == *\"/\"* ]]; then\n\tappToDelete=\"/Applications/$appName\"\nelse\n\tappToDelete=\"$appName\"\nfi\n\necho \"Application will be deleted: $appToDelete\"\n# Remove the application\n/bin/rm -rf \"${appToDelete}\"\n\necho \"Checking if $appName is actually deleted...\"\nif [[ -d \"${appToDelete}\" ]]; then\n    echo \"$appName failed to delete\"\nelse\n    echo \"$appName deleted successfully\"\nfi\n\n# Try to Forget the packages if we can find a match\n# Loop through the remaining parameters\npkg_1=\"%PKG_ID%\"\npkg_2=\"%PKG_ID_2%\"\npkg_3=\"%PKG_ID_3%\"\npkg_4=\"%PKG_ID_4%\"\npkg_5=\"%PKG_ID_5%\"\nfor (( i = 1; i < 5; i++ )); do\n    pkg_id=pkg_$i\n    if [[ ${!pkg_id} != \"None\" ]]; then\n        echo \"Forgetting package ${!pkg_id}...\"\n        /usr/sbin/pkgutil --pkgs | /usr/bin/grep -i \"${!pkg_id}\" | /usr/bin/xargs /usr/bin/sudo /usr/sbin/pkgutil --forget\n    fi\ndone\n\necho \"$appName deletion complete\"\n"
    file_mode: '0755'
    file_path: '%RECIPE_DIR%/%NAME%-uninstall.sh'

- Processor: FileCreator
  Arguments:
    file_content: "<script>\n    <name>%NAME%-uninstall.sh</name>\n    <category>Uninstallers</category>\n    <filename>%NAME%-uninstall.sh</filename>\n    <info />\n    <notes />\n    <priority>After</priority>\n    <parameters />\n    <os_requirements />\n</script>\n"
    file_mode: '0755'
    file_path: '%RECIPE_DIR%/%NAME%-ScriptTemplate-uninstall.xml'
